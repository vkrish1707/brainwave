Great. Here‚Äôs the updated backend AI prompt logic that adds your latest requirement:

‚∏ª

üîÅ AI Prompt: Backend API ‚Äì Fetch BRP Issues by Query ID (Latest Snapshot)

Build an Express.js endpoint to return BRP issues based on a given queryId. The logic involves:

‚∏ª

üì¶ Collections Involved
	‚Ä¢	brp_queries ‚Äì Metadata for saved JQL-like queries
	‚Ä¢	brp_snapshots ‚Äì Snapshot entries containing queryId, snapshotId, createdAt
	‚Ä¢	brp_issues ‚Äì All fetched issues tied to a snapshotId

‚∏ª

üì• Input
	‚Ä¢	queryId (from request param or query param): ID of the saved BRP query
	‚Ä¢	Optional: view param (overall, variant, etc.)

‚∏ª

üß† Core Logic
	1.	Find Latest Snapshot
	‚Ä¢	From brp_snapshots, find the document with the matching queryId and the most recent createdAt.
	‚Ä¢	Retrieve its snapshotId.
	2.	Fetch Issues
	‚Ä¢	From brp_issues, pull all issues where snapshotId matches the one found above.
	3.	Apply Business Logic
	‚Ä¢	For each issue, apply derived field logic using the helper functions in brpLogic.js:
	‚Ä¢	Complexity
	‚Ä¢	POR Status
	‚Ä¢	Has FW
	‚Ä¢	Has SW
	‚Ä¢	SOC Impact
	‚Ä¢	GC Impact
	4.	View-based Formatting
	‚Ä¢	Format the output depending on the view parameter:
	‚Ä¢	overall, variant, subsystem, sw, fw, gc
	‚Ä¢	Each view returns specific columns (defined in logic or a config file).
	5.	Return Formatted Result
	‚Ä¢	As JSON by default
	‚Ä¢	If export=csv, return downloadable CSV stream

‚∏ª

‚úÖ Example Endpoint

GET /api/brp/issues?queryId=abc123&view=overall


‚∏ª

üìù Notes
	‚Ä¢	Reuse existing snapshot/issue resolution logic from jira_snapshots and jira_issues.
	‚Ä¢	Do not duplicate logic across views ‚Äî use a view config file or formatter for columns.
	‚Ä¢	Store all business logic in brpLogic.js as reusable, testable functions.
	‚Ä¢	Make sure snapshot logic picks the latest by timestamp, not just ID.

‚∏ª

Would you like a code scaffold for this now (including route + logic + utils)?
