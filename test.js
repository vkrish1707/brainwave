Excellent â€” youâ€™ve now created the base for GFXOpsTool, and youâ€™re ready to build a modular, modern Next.js UI.

Here are the complete AI-executable instructions to structure and implement your project using JavaScript, Tailwind CSS, and SheetJS â€” with traceability features like JIRAâ€“JAMA linking and syncing, based entirely on Excel files.

â¸»

ðŸ§­ PROJECT OVERVIEW: GFXOpsTool

GFXOpsTool is a modular operations support UI for internal GFX teams. The first feature module to implement is Traceability Automation.

â¸»

âœ… 1. âœ¨ UI Overview

ðŸ”¸ Home Page Layout
	â€¢	Create a dashboard-style homepage with a center-aligned grid containing two clickable cards:

[ðŸ“Ž Link JIRA to JAMA Item]
[ðŸ”„ Sync JIRA and JAMA (Excel Compare)]

ðŸ”¸ Visual Styling
	â€¢	Use a modern, clean color theme:
	â€¢	Primary: indigo-600
	â€¢	Accent: teal-400
	â€¢	Background: gray-50
	â€¢	Use Tailwind CSS for layout, hover effects, rounded corners, and box shadows
	â€¢	Add simple icons or emojis for visual distinction on cards

â¸»

âœ… 2. ðŸ§± Project Structure

GFXOpsTool/
â”œâ”€â”€ public/
â”‚   â””â”€â”€ static_data/            # Excel files uploaded manually
â”‚       â”œâ”€â”€ current.xlsx
â”‚       â””â”€â”€ previous.xlsx
â”œâ”€â”€ pages/
â”‚   â”œâ”€â”€ index.js                # Home page with cards
â”‚   â”œâ”€â”€ link-jira-jama.js       # Module 1 UI
â”‚   â””â”€â”€ sync-jira-jama.js       # Module 2 UI
â”œâ”€â”€ components/
â”‚   â”œâ”€â”€ Card.js                 # Reusable UI card component
â”‚   â””â”€â”€ Table.js                # Table display of Excel data
â”œâ”€â”€ utils/
â”‚   â”œâ”€â”€ parseExcel.js           # Excel -> JSON logic using SheetJS
â”‚   â””â”€â”€ compareExcel.js         # Logic to compare current vs previous
â”œâ”€â”€ styles/
â”‚   â””â”€â”€ globals.css             # Tailwind base styles


â¸»

âœ… 3. ðŸ“¦ Dependencies to Install

npm install xlsx

Already installed:
	â€¢	react, next, tailwindcss, etc. (from setup)

â¸»

âœ… 4. ðŸ§© Feature Modules to Implement

â¸»

ðŸ“Ž Module 1: Link JIRA to JAMA Item

Page: /link-jira-jama

Functionality:
	â€¢	Upload a JIRA Excel file (single file)
	â€¢	Parse and display it in a table (tailwind-styled)
	â€¢	Highlight rows where Linked_JAMA_ID is empty
	â€¢	On row click, show ticket details in a side panel or modal
	â€¢	Allow editing the Linked_JAMA_ID in-memory
	â€¢	Export the modified data back as Excel

â¸»

ðŸ”„ Module 2: Sync JIRA and JAMA (Excel Compare)

Page: /sync-jira-jama

Functionality:
	â€¢	Upload two Excel files: current.xlsx, previous.xlsx
	â€¢	Parse both and match rows using JIRA_ID
	â€¢	Detect field changes (e.g., Status, Labels)
	â€¢	Highlight changed rows in a diff view table
	â€¢	Show summary stats: # of added, removed, changed tickets
	â€¢	Export changes as new Excel report if needed

â¸»

âœ… 5. ðŸŽ¨ UI Design Notes

Typography:
	â€¢	Headings: text-3xl font-bold text-indigo-600
	â€¢	Section titles: text-xl font-semibold text-gray-800

Components:
	â€¢	Use hoverable, clickable cards with:
	â€¢	Shadow: shadow-md hover:shadow-lg
	â€¢	Rounded corners: rounded-xl
	â€¢	Padding: p-6
	â€¢	Cursor: cursor-pointer

Table UI:
	â€¢	Use Tailwind table styles:
	â€¢	Header row: bg-indigo-100 text-sm font-semibold
	â€¢	Body rows: hover:bg-indigo-50 transition
	â€¢	Conditional color tags for status changes

Modal/Panel UI:
	â€¢	Use Tailwind modal or slide-over for showing details/editing

â¸»

âœ… 6. ðŸ§  UX Interactions

Action	Behavior
Card click	Navigates to the correct page (/link-jira-jama or /sync-jira-jama)
Excel upload	Automatically parses and displays results
Row click	Opens detail view for editing
Edit in UI	Stores changes temporarily (JSON state)
Export	Triggers Excel export using updated state


â¸»

âœ… 7. ðŸ’¾ File Handling (Offline Mode)
	â€¢	Use file input (<input type="file">) for uploading .xlsx files
	â€¢	Do NOT use backend or APIs
	â€¢	All Excel parsing happens in-browser using xlsx
	â€¢	Files stored in-memory during session; not uploaded anywhere

â¸»

âœ… 8. ðŸš€ Launch & Demo Tips
	â€¢	Run: npm run dev
	â€¢	Open: http://localhost:3000
	â€¢	Show homepage with two cards
	â€¢	Click into each module to demonstrate Excel-based workflow

â¸»

âœ… Next Step

Let me know when youâ€™re ready to:
	â€¢	Build the homepage layout with cards
	â€¢	Implement Excel upload and table display for Module 1

Iâ€™ll guide you feature-by-feature.

Would you like me to generate the homepage UI structure with Tailwind card layout next (without actual logic yet)?