Great ‚Äî based on everything you described and showed (including the screenshots and requirements), here is a clear, step-by-step instruction set you can pass to your AI agent for implementing this new API.

‚∏ª

‚úÖ New API Spec: GET /brp-snapshot/issue-diff/:snapshotId

üåê Purpose

Compare the issues from:
	‚Ä¢	BRP Snapshot Issues collection (Collection A)
	‚Ä¢	Temporary JIRA Issues collection (Collection B)

‚Ä¶and return view-based field differences for each jiraKey.

‚∏ª

üß† Input Parameters
	‚Ä¢	snapshotId (path param)
	‚Ä¢	view (query param) ‚Äî optional, defaults to a base view

‚∏ª

üì§ Output

For each jiraKey, return:
	‚Ä¢	Only changed fields
	‚Ä¢	Empty string or array for unchanged fields
	‚Ä¢	Comparison string for changed fields (e.g. "added: X", "removed: Y", "changed: NO ‚Üí YES")

Also always include:
	‚Ä¢	jiraKey, summary, status (even if unchanged)

‚∏ª

‚öôÔ∏è Step-by-Step Logic

1. Fetch BRP Snapshot Issues

const brpIssues = await BrpSnapshotIssueModel.find({ snapshotId });

2. Fetch Temporary BRP Issues

const tempIssues = await TemporaryBrpIssueModel.find({}); // Adjust filter if needed

3. Loop through BRP Snapshot Issues

For each issue in brpIssues (let‚Äôs call it issueA):
	‚Ä¢	Match issue from tempIssues (call it issueB) by jiraKey
	‚Ä¢	Pass each to the existing service logic that handles field formatting by view (just like getBrpIssuesBySnapshotId)

const formattedA = brpIssueFormatter(issueA, view);
const formattedB = brpIssueFormatter(issueB, view);


‚∏ª

4. Field-by-Field Diff

For each field in the view result:

a. If primitive:

if (formattedA[field] !== formattedB[field]) {
   result[field] = `changed: ${formattedB[field] || "empty"} ‚Üí ${formattedA[field]}`;
} else {
   result[field] = ""; // No change
}

b. If array:

Do a set diff:
	‚Ä¢	Show added: X, removed: Y
	‚Ä¢	If nothing changed, return []

const added = A.filter(x => !B.includes(x));
const removed = B.filter(x => !A.includes(x));

Format as:

variant: [
  "added: Medusa Halo (Client-Halo)",
  "removed: Legacy Chip X"
]


‚∏ª

5. Final Payload per Issue

{
  "jiraKey": "GFXIPARCH-2286",
  "summary": "Auto testing ticket 1",
  "status": "Proposal",
  "variant": ["added: Medusa Halo (Client-Halo)"],
  "priority": "", 
  ...
}

All unchanged fields will be empty string or empty array.

‚∏ª

üè∑Ô∏è Naming Conventions
	‚Ä¢	API Name: getBrpIssueDiffBySnapshotId
	‚Ä¢	File: brpIssue.controller.ts (if following modular pattern)
	‚Ä¢	URL: GET /api/brp-snapshot/issue-diff/:snapshotId

‚∏ª

üìã Notes
	‚Ä¢	Don‚Äôt use +/- for array changes ‚Äî only "added: X" / "removed: Y"
	‚Ä¢	If field exists in A but not in B: treat B as empty
	‚Ä¢	Can skip comparison if jiraKey not found in both
	‚Ä¢	Reuse getBrpIssuesBySnapshotId logic for consistent field computation

‚∏ª

Let me know if you want the API boilerplate code in Express or NestJS format ‚Äî I can scaffold it out.